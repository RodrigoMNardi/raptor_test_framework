# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: frr-northbound.proto for package 'frr'
# Original file comments:
#
# Copyright (C) 2019  NetDEF, Inc.
#                     Renato Westphal
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; see the file COPYING; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
#
#

require 'grpc'
require_relative 'frr-northbound_pb'

module Frr
  module Northbound
    # Service specification for the FRR northbound interface.
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'frr.Northbound'

      # Retrieve the capabilities supported by the target.
      rpc :GetCapabilities, GetCapabilitiesRequest, GetCapabilitiesResponse
      # Retrieve configuration data, state data or both from the target.
      rpc :Get, GetRequest, stream(GetResponse)
      # Create a new candidate configuration and return a reference to it. The
      # created candidate is a copy of the running configuration.
      rpc :CreateCandidate, CreateCandidateRequest, CreateCandidateResponse
      # Delete a candidate configuration.
      rpc :DeleteCandidate, DeleteCandidateRequest, DeleteCandidateResponse
      # Update a candidate configuration by rebasing the changes on top of the
      # latest running configuration. Resolve conflicts automatically by giving
      # preference to the changes done in the candidate configuration.
      rpc :UpdateCandidate, UpdateCandidateRequest, UpdateCandidateResponse
      # Edit a candidate configuration. All changes are discarded if any error
      # happens.
      rpc :EditCandidate, EditCandidateRequest, EditCandidateResponse
      # Load configuration data into a candidate configuration. Both merge and
      # replace semantics are supported.
      rpc :LoadToCandidate, LoadToCandidateRequest, LoadToCandidateResponse
      # Create a new configuration transaction using a two-phase commit protocol.
      rpc :Commit, CommitRequest, CommitResponse
      # List the metadata of all configuration transactions recorded in the
      # transactions database.
      rpc :ListTransactions, ListTransactionsRequest, stream(ListTransactionsResponse)
      # Fetch a configuration (identified by its transaction ID) from the
      # transactions database.
      rpc :GetTransaction, GetTransactionRequest, GetTransactionResponse
      # Lock the running configuration, preventing other users from changing it.
      rpc :LockConfig, LockConfigRequest, LockConfigResponse
      # Unlock the running configuration.
      rpc :UnlockConfig, UnlockConfigRequest, UnlockConfigResponse
      # Execute a YANG RPC.
      rpc :Execute, ExecuteRequest, ExecuteResponse
    end

    Stub = Service.rpc_stub_class
  end
end
